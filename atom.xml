<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Zhangfan94.github.io</id>
    <title>半生志</title>
    <updated>2021-01-17T04:27:16.173Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Zhangfan94.github.io"/>
    <link rel="self" href="https://Zhangfan94.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Zhangfan94.github.io/images/avatar.png</logo>
    <icon>https://Zhangfan94.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 半生志</rights>
    <entry>
        <title type="html"><![CDATA[使用RT-Thread Studio + CubeMX开发项目（二）：使用pwm]]></title>
        <id>https://Zhangfan94.github.io/post/shi-yong-rt-thread-studio-cubemx-kai-fa-xiang-mu-er-shi-yong-pwm/</id>
        <link href="https://Zhangfan94.github.io/post/shi-yong-rt-thread-studio-cubemx-kai-fa-xiang-mu-er-shi-yong-pwm/">
        </link>
        <updated>2021-01-15T15:56:48.000Z</updated>
        <summary type="html"><![CDATA[<p>摘要：本文主要记录如何使用 RT-Thread Studio + CubeMX 来配置 STM32 上的 PWM 器件。</p>
]]></summary>
        <content type="html"><![CDATA[<p>摘要：本文主要记录如何使用 RT-Thread Studio + CubeMX 来配置 STM32 上的 PWM 器件。</p>
<!-- more -->
<h3 id="第一步-利用-rt-thread-studio-配置-pwm-相关代码接着-uart2-项目进行">第一步、利用 RT-Thread Studio 配置 PWM 相关代码（接着 UART2 项目进行）</h3>
<p>首先在 board.h 中官方给出了如何在 rtt 中使用 pwm。</p>
<figure data-type="image" tabindex="1"><img src="https://Zhangfan94.github.io/post-images/1610726552242.png" alt="" loading="lazy"></figure>
<ul>
<li>STEP 1：RT-Thread Settings 中打开 PWM 驱动支持。</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://Zhangfan94.github.io/post-images/1610726522880.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p>STEP 2：在 board.h 中定义相关宏，这里注意 “BSP_USING_PWM1_CH1 ”，这个也是需要的，可以看。</p>
<pre><code class="language-cpp">/** if you want to use pwm you can use the following instructions.
 *
 * STEP 1, open pwm driver framework support in the RT-Thread Settings file
 *
 * STEP 2, define macro related to the pwm
 *                 such as     #define BSP_USING_PWM1
 *
 * STEP 3, copy your pwm timer init function from stm32xxxx_hal_msp.c generated by stm32cubemx to the end if board.c file
 *                 such as     void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)  and
 *                             void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 *
 * STEP 4, modify your stm32xxxx_hal_config.h file to support pwm peripherals. define macro related to the peripherals
 *                 such as     #define HAL_TIM_MODULE_ENABLED
 *
 */

/*#define BSP_USING_PWM1*/
/*#define BSP_USING_PWM2*/
/*#define BSP_USING_PWM3*/

#define BSP_USING_PWM1
#define BSP_USING_PWM1_CH1
</code></pre>
<p>下面是源码中对 “BSP_USING_PWM1_CH1” 的使用：</p>
<pre><code class="language-cpp">static void pwm_get_channel(void)
{
#ifdef BSP_USING_PWM1_CH1
    stm32_pwm_obj[PWM1_INDEX].channel |= 1 &lt;&lt; 0;
#endif
#ifdef BSP_USING_PWM1_CH2
    stm32_pwm_obj[PWM1_INDEX].channel |= 1 &lt;&lt; 1;
#endif

......

#ifdef BSP_USING_PWM9_CH4
    stm32_pwm_obj[PWM9_INDEX].channel |= 1 &lt;&lt; 3;
#endif
#ifdef BSP_USING_PWM12_CH1
    stm32_pwm_obj[PWM12_INDEX].channel |= 1 &lt;&lt; 0;
#endif
#ifdef BSP_USING_PWM12_CH2
    stm32_pwm_obj[PWM12_INDEX].channel |= 1 &lt;&lt; 1;
#endif
}
</code></pre>
</li>
<li>
<p>STEP 3：使用 cubemx 生成，pwm 的初始化相关代码 HAL_TIM_Base_MspInit 和 HAL_TIM_MspPostInit (只需要修改红色标记就可以，其他的我们使用 rtt 中提供的 API 来修改就好，drv_pwm_set 函数中会根据用户需要的周期和占空比自动计算相应的参数)，并拷贝到 board.c 中。</p>
</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://Zhangfan94.github.io/post-images/1610726584380.png" alt="" loading="lazy"></figure>
<pre><code class="language-cpp"> static rt_err_t drv_pwm_set(TIM_HandleTypeDef *htim, struct rt_pwm_configuration *configuration)
 {
     rt_uint32_t period, pulse;
     rt_uint64_t tim_clock, psc;
     /* Converts the channel number to the channel number of Hal library */
     rt_uint32_t channel = 0x04 * (configuration-&gt;channel - 1);

 		... ...

     /* Convert nanosecond to frequency and duty cycle. 1s = 1 * 1000 * 1000 * 1000 ns */
     tim_clock /= 1000000UL;
     period = (unsigned long long)configuration-&gt;period * tim_clock / 1000ULL ;
     psc = period / MAX_PERIOD + 1;
     period = period / psc;
     __HAL_TIM_SET_PRESCALER(htim, psc - 1);

     if (period &lt; MIN_PERIOD)
     {
         period = MIN_PERIOD;
     }
     __HAL_TIM_SET_AUTORELOAD(htim, period - 1);

     pulse = (unsigned long long)configuration-&gt;pulse * tim_clock / psc / 1000ULL;
     if (pulse &lt; MIN_PULSE)
     {
         pulse = MIN_PULSE;
     }
     else if (pulse &gt; period)
     {
         pulse = period;
     }
     __HAL_TIM_SET_COMPARE(htim, channel, pulse - 1);
     __HAL_TIM_SET_COUNTER(htim, 0);

     /* Update frequency value */
     HAL_TIM_GenerateEvent(htim, TIM_EVENTSOURCE_UPDATE);

     return RT_EOK;
 }
 ```

- STEP 4：修改 stm32xxxx_hal_config.h 文件，打开 HAL 对相关功能的支持。

![](https://Zhangfan94.github.io/post-images/1610726601903.png)

- 需要在 pwm_config.h 文件中自己构建 PWM1_CONFIG ，否则使用 PWM1 时，编译报错。

 ```cpp
 #ifdef BSP_USING_PWM1
 #ifndef PWM1_CONFIG
 #define PWM1_CONFIG                             \
     {                                           \
        .tim_handle.Instance     = TIM1,         \
        .name                    = &quot;pwm1&quot;,       \
        .channel                 = 0             \
     }
 #endif /* PWM1_CONFIG */
 #endif /* BSP_USING_PWM1 */
 ```

### 第二步、完善对 PWM 初始化及测试的代码

创建路径 “RttDemo\applications\service\pwm” 并创建文件 “PwmChanel1.h” “PwmChanel1.c”。

- “PwmChanel1.h” 内容如下：

```cpp
/*
* Change Logs:
* Date           Author       Notes
* 2020-10-23     ZhangFan     first version
*/

#ifndef _PWM_CHANEL_1_H_
#define _PWM_CHANEL_1_H_

#include &lt;rtdevice.h&gt;

rt_bool_t pwm_ch1_init();

/* 设置PWM1 的频率 */
rt_bool_t pwm_ch1_set_freq(rt_uint32_t freq);

/* 设置PWM1 的占空比 */
rt_bool_t pwm_ch1_set_duty(rt_uint32_t duty);

#endif //_PWM_CHANEL_1_H_
</code></pre>
<ul>
<li>“PwmChanel1.c” 内容如下：</li>
</ul>
<pre><code class="language-cpp">/*
 * Change Logs:
 * Date           Author       Notes
 * 2020-10-21     ZhangFan     first version
 */

#include &quot;PwmChanel1.h&quot;

/* log */
#define DBG_TAG    &quot;PwmChanel1&quot;
#define DBG_LVL    DBG_LOG
#include &lt;rtdbg.h&gt;

/* pwm chanel */
#define PWM_DEV_NAME        &quot;pwm1&quot;  /* PWM设备名称 */
#define PWM_DEV_CHANNEL     1       /* PWM通道 */
struct rt_device_pwm *pwm_dev;      /* PWM设备句柄 */

rt_uint32_t period = 500000000;     /* 周期为5ms，单位为纳秒ns */
rt_uint32_t pulse  = 250000000;     /* PWM脉冲宽度值，单位为纳秒ns */

rt_bool_t pwm_ch1_init()
{
    /* step 1、查找设备 */
    pwm_dev = (struct rt_device_pwm *)rt_device_find(PWM_DEV_NAME);
    if (pwm_dev == RT_NULL)
    {
        LOG_D(&quot;pwm run failed! can't find %s device!\n&quot;, PWM_DEV_NAME);
        return RT_FALSE;
    }

    /* step 2、设置PWM周期和脉冲宽度 */
    rt_pwm_set(pwm_dev, PWM_DEV_CHANNEL, period, pulse);

    /* step 3、使能 PWM 设备的输出通道 */
    rt_pwm_enable(pwm_dev, PWM_DEV_CHANNEL);

    return RT_TRUE;
}

/* 设置PWM1 的频率 */
rt_bool_t pwm_ch1_set_freq(rt_uint32_t freq)
{
    if(RT_EOK != rt_pwm_set(pwm_dev, PWM_DEV_CHANNEL, freq, pulse))
    {
        return RT_FALSE;
    }

    period = freq;

    return RT_TRUE;
}

/* 设置PWM1 的占空比 */
rt_bool_t pwm_ch1_set_duty(rt_uint32_t duty)
{
    if(RT_EOK != rt_pwm_set(pwm_dev, PWM_DEV_CHANNEL, period, duty))
    {
        return RT_FALSE;
    }

    pulse = duty;

    return RT_TRUE;
}
</code></pre>
<ul>
<li>“main.c”函数内容：</li>
</ul>
<pre><code class="language-cpp">#include &lt;rtthread.h&gt;

#define DBG_TAG &quot;main&quot;
#define DBG_LVL DBG_LOG
#include &lt;rtdbg.h&gt;

#include &quot;SerialUart2.h&quot;
#include &quot;PwmChanel1.h&quot;

int main(void)
{
    int count = 1;

    serial2_init(); /* 串口2初始化 */
    pwm_ch1_init(); /* PWM 初始化 */

    while (count++)
    {
        //LOG_D(&quot;Hello RT-Thread!&quot;);
        serial2_write(&quot;Hello RT-Thread!\r\n&quot;, sizeof(&quot;Hello RT-Thread!\r\n&quot;) - 1);
        rt_thread_mdelay(1000);
    }

    return RT_EOK;
}
</code></pre>
<h3 id="第三步-烧写并测试">第三步、烧写并测试</h3>
<p>测试但是一直没有 PWM 波形输出，去论坛转了转，发现这个帖子：</p>
<p><a href="https://club.rt-thread.org/ask/question/424912.html">drv_pwm.c 有bug</a></p>
<p>增加下边这部分代码：</p>
<figure data-type="image" tabindex="4"><img src="https://Zhangfan94.github.io/post-images/1610726626447.png" alt="" loading="lazy"></figure>
<p>修改后再次测试，波形出现：</p>
<figure data-type="image" tabindex="5"><img src="https://Zhangfan94.github.io/post-images/1610726640871.png" alt="" loading="lazy"></figure>
<h3 id="第四步-总结注意点">第四步、总结注意点</h3>
<p>大概说几点需要注意的：</p>
<ol>
<li>当使用 pwm 设备时，rtt 会在 stm32_hw_pwm_init 函数中，初始化对应的 Timer 不需要用户单独去初始化。</li>
<li>stm32_hw_pwm_init 函数存在 Bug ，没有调用 “HAL_TIM_Base_Init” 函数。</li>
<li>要加 BSP_USING_PWM1_CH1 个宏。</li>
<li>pwm_config.h 文件中自己构建 PWM1_CONFIG。</li>
</ol>
<h3 id="pwm参考知识">PWM参考知识：</h3>
<p><a href="https://www.waveshare.net/study/article-643-1.html">STM32CubeMX系列教程4:PWM</a></p>
<p><a href="https://www.rt-thread.org/document/site/programming-manual/device/pwm/pwm/">PWM设备 - RT-Thread 文档中心</a></p>
<p><a href="https://blog.csdn.net/m0_37697335/article/details/109008836">RT-Thread Studio - 使用PWM设备_玄机百问的博客-CSDN博客</a></p>
<p><a href="https://club.rt-thread.org/ask/question/427270.html">PWM配置一直没法输出？</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用RT-Thread Studio + CubeMX开发项目（一）：使用uart]]></title>
        <id>https://Zhangfan94.github.io/post/shi-yong-rt-thread-studio-cubemx-kai-fa-xiang-mu-yi-shi-yong-uart/</id>
        <link href="https://Zhangfan94.github.io/post/shi-yong-rt-thread-studio-cubemx-kai-fa-xiang-mu-yi-shi-yong-uart/">
        </link>
        <updated>2021-01-15T15:38:53.000Z</updated>
        <summary type="html"><![CDATA[<p>摘要：本文将从一个简单的需求出发，利用 RT-Thread Studio + CubeMX 这两个工具，基于 RT-Thread 完成系统创建及开发，目的是为了记录开发过程，方便以后回顾。</p>
]]></summary>
        <content type="html"><![CDATA[<p>摘要：本文将从一个简单的需求出发，利用 RT-Thread Studio + CubeMX 这两个工具，基于 RT-Thread 完成系统创建及开发，目的是为了记录开发过程，方便以后回顾。</p>
<!-- more -->
<h3 id="需求描述">需求描述：</h3>
<p>使用 RT-Thread Studio 创建基于 STM32F103RET6 的工程，并 USART1 和 USART2 ，USART1 用于 msh 的输入/输出，USART2 用于其他业务。</p>
<h3 id="第一步-使用rt-thread-studio创建工程rttdemo">第一步、使用RT-Thread Studio创建工程（RttDemo）</h3>
<p>软件安装不做赘述请看官方文档：<a href="https://www.rt-thread.org/document/site/rtthread-studio/um/studio-user-begin/#rt-thread-studio">安装 RTT Studio</a>。</p>
<p>步骤：文件→新建→RT-Thread项目</p>
<p><img src="https://Zhangfan94.github.io/post-images/1610725701339.png" alt="" loading="lazy"><br>
<img src="https://Zhangfan94.github.io/post-images/1610725711243.png" alt="" loading="lazy"></p>
<p>注意：RTT Studio 生成的工程使用的是芯片内部HSI时钟，如需修改，请完善 drv_clk.c，将 drv_clk.c 文件中 system_clock_config(int target_freq_Mhz)函数中的内容，替换成我们用 CubeMX 生成的时钟初始化代码。</p>
<h3 id="第二步-使用cubemx配置工程主要是配置时钟">第二步、使用CubeMX配置工程（主要是配置时钟）</h3>
<p>这里只简单说下，详细配置过程可以参考下文的<a href="http://blog.talk20s.com/2020/01/19/%E4%BD%BF%E7%94%A8STM32CubeMX%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE%E5%B7%A5%E7%A8%8B%E6%AD%A5%E9%AA%A4/">链接</a>，（需要注意的是生成代码的时候，不要勾选 “Generate peripheral initialization as a pair of&quot;.c/.h' files per peripheral” 选项）：</p>
<ul>
<li>工程创建，注意创建路</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://Zhangfan94.github.io/post-images/1610725746506.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://Zhangfan94.github.io/post-images/1610725758297.png" alt="" loading="lazy"></figure>
<ul>
<li>RCC 设置</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://Zhangfan94.github.io/post-images/1610725769056.png" alt="" loading="lazy"></figure>
<ul>
<li>时钟配置</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://Zhangfan94.github.io/post-images/1610725776753.png" alt="" loading="lazy"></figure>
<h3 id="第三步-修改项目默认时钟配置为-cubemx-配置的时钟">第三步、修改项目默认时钟配置为 CubeMX 配置的时钟</h3>
<p>在 CubeMX 生成项目中找到 main.c 文件，并使用 main.c 文件中的 SystemClock_Config(void) 函数内容替换掉RTT工程中 drv_clk.c 文件中的 system_clock_config(int target_freq_Mhz) 函数。</p>
<h3 id="第四步-新增串口usart2">第四步、新增串口（USART2）</h3>
<p>可参考官方文档，新增串口部分：</p>
<p><a href="https://www.rt-thread.org/document/site/rtthread-studio/drivers/uart/v4.0.2/rtthread-studio-uart-v4.0.2/">完整版 - RT-Thread 文档中心</a></p>
<p>在 RTT 项目 board.h 中添加对 USART2 的支持方法如下：</p>
<pre><code class="language-cpp">// 增加以下宏
#define BSP_USING_UART2
#define BSP_UART2_TX_PIN       &quot;PA2&quot;
#define BSP_UART2_RX_PIN       &quot;PA3&quot;
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://Zhangfan94.github.io/post-images/1610725891127.png" alt="" loading="lazy"></figure>
<p>编译运行程序， PC 端连接 uart1，在 msh 中，输入 list_device 可以看到 uart2 设备。</p>
<pre><code class="language-cpp">msh &gt;list_device
device           type         ref count
-------- -------------------- ----------
uart2    Character Device     0       
uart1    Character Device     2       
pin      Miscellaneous Device 0       
msh &gt;
</code></pre>
<h3 id="第五步-封装-usart2-并使用接口输出-hello-rt-thread">第五步、封装 USART2 并使用接口输出 “Hello RT-Thread!”</h3>
<ul>
<li>创建文件</li>
</ul>
<p>在 applications 目录下创建 service/uart 文件夹，并创建文件 SerialUart2.h 和 SerialUart2.c ，</p>
<p>SerialUart2.h 主要内容如下：</p>
<pre><code class="language-cpp">#ifndef _SERIAL_UART_2_H_
#define _SERIAL_UART_2_H_

#include &lt;rtdevice.h&gt;

rt_bool_t serial2_init();

rt_size_t serial2_write(const void *buffer, rt_size_t size);

rt_size_t serial2_read(void *buffer, rt_size_t size);

rt_bool_t serial2_change_baudrate(rt_uint32_t rate);

#endif //_SERIAL_UART_2_H_
</code></pre>
<p>SerialUart2.c 主要内容如下：</p>
<pre><code class="language-cpp">#include &quot;SerialUart2.h&quot;

/* log */
#define DBG_TAG    &quot;SerialUart2&quot;
#define DBG_LVL    DBG_LOG
#include &lt;rtdbg.h&gt;

/* uart */
#define UART_NAME       &quot;uart2&quot;
static rt_device_t serial;

struct serial_configure config = RT_SERIAL_CONFIG_DEFAULT;

/* circle buffer */
#define TX_RING_BUFFER_LEN  100
#define RX_RING_BUFFER_LEN  100

/* line buffer */
#define TX_RING_BUFFER_LEN  100

static rt_err_t serial_rx_callback(rt_device_t dev, rt_size_t size)
{
    /* 更新超时检测时间 */
    return RT_EOK;
}

rt_bool_t serial2_init()
{
    rt_err_t ret = RT_EOK;

    serial = rt_device_find(UART_NAME);
    if (!serial)
    {
        LOG_D(&quot;find %s failed!\n&quot;, UART_NAME);
        return RT_FALSE;
    }

    ret = rt_device_set_rx_indicate(serial, serial_rx_callback);
    if(ret != RT_EOK)
    {
        LOG_D(&quot;uart2 set rx callback failed\r\n&quot;);
        return RT_FALSE;
    }

    ret = rt_device_control(serial, RT_DEVICE_CTRL_CONFIG, &amp;config);
    if(ret != RT_EOK)
    {
        LOG_D(&quot;control device failed\r\n&quot;);
        return RT_FALSE;
    }

    ret = rt_device_open(serial, RT_DEVICE_FLAG_INT_RX|RT_DEVICE_FLAG_INT_TX);
    if (ret != RT_EOK)
    {
        LOG_D(&quot;open device failed\r\n&quot;);
        return RT_FALSE;
    }

    return RT_TRUE;
}

rt_size_t serial2_write(const void *buffer, rt_size_t size)
{
    return rt_device_write(serial, 0, str, (sizeof(str) - 1));
}

rt_size_t serial2_read(void *buffer, rt_size_t size)
{
    return rt_device_read(serial, 0, buffer, size);
}

rt_bool_t serial2_change_baudrate(rt_uint32_t rate)
{
    rt_err_t ret = RT_EOK;
    struct serial_configure configtmp = config;

    /* 修改串口波特率 */
    configtmp.baud_rate = rate;

    ret = rt_device_control(serial, RT_DEVICE_CTRL_CONFIG, &amp;configtmp);
    if(RT_EOK != ret)
    {
        LOG_D(&quot;open device failed\r\n&quot;);
        return RT_FALSE;
    }

    return RT_TRUE;
}
</code></pre>
<p>文件重建完成后，加入头文件路径：</p>
<p>在项目上点击右键，再点击属性出现下图中的窗口，在其中添加自己刚创建的路径，并点击“应用并关闭”；</p>
<figure data-type="image" tabindex="6"><img src="https://Zhangfan94.github.io/post-images/1610725927138.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://Zhangfan94.github.io/post-images/1610725935598.png" alt="" loading="lazy"></figure>
<ul>
<li>修改 main.c ，增加对 uart2 的测试代码：</li>
</ul>
<pre><code class="language-cpp">#include &lt;rtthread.h&gt;

#define DBG_TAG &quot;main&quot;
#define DBG_LVL DBG_LOG
#include &lt;rtdbg.h&gt;

#include &quot;SerialUart2.h&quot;

int main(void)
{
    int count = 1;

    serial2_init();

    while (count++)
    {
        LOG_D(&quot;Hello RT-Thread!&quot;);
        serial2_write(&quot;Hello RT-Thread!&quot;, sizeof(&quot;Hello RT-Thread!&quot;));
        rt_thread_mdelay(1000);
    }

    return RT_EOK;
}
</code></pre>
<ul>
<li>编译代码。</li>
</ul>
<h3 id="第六步-测试">第六步、测试</h3>
<ul>
<li>使用 JLink 下载程序，并使用 TTL 转 USB 模块连接串口 2 到电脑，电脑上使用串口调试工具接收数据。</li>
</ul>
<figure data-type="image" tabindex="8"><img src="https://Zhangfan94.github.io/post-images/1610725949124.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://Zhangfan94.github.io/post-images/1610725959322.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://Zhangfan94.github.io/post-images/1610725967697.png" alt="" loading="lazy"></figure>
<ul>
<li>查看 uart1 的输出信息如下，可以看 uart2 已经被使用一次。</li>
</ul>
<pre><code class="language-cpp">msh &gt;list_device[D/main] Hello RT-Thread!

device           type         ref count
-------- -------------------- ----------
uart2    Character Device     1       
uart1    Character Device     2       
pin      Miscellaneous Device 0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[QML 动画——动态磁贴效果]]></title>
        <id>https://Zhangfan94.github.io/post/qml-dong-hua-dong-tai-ci-tie-xiao-guo/</id>
        <link href="https://Zhangfan94.github.io/post/qml-dong-hua-dong-tai-ci-tie-xiao-guo/">
        </link>
        <updated>2021-01-14T17:20:52.000Z</updated>
        <summary type="html"><![CDATA[<p>摘要：最近因项目需要在学习 QML，这个小控件作为对 QML 的一个小练习。控件是想模仿苹果的动态磁贴和windows的开始菜单磁贴效果，当然功能没有水果的强大了😂。内容很简单，没什么说的直接上源码吧。</p>
]]></summary>
        <content type="html"><![CDATA[<p>摘要：最近因项目需要在学习 QML，这个小控件作为对 QML 的一个小练习。控件是想模仿苹果的动态磁贴和windows的开始菜单磁贴效果，当然功能没有水果的强大了😂。内容很简单，没什么说的直接上源码吧。</p>
 <!-- more -->
<blockquote>
<p><strong>QML</strong> (Qt Markup Language)或 Qt Meta Language 或 Qt Modeling Language 是基于 JavaScript 、宣告式编程的编程语言，用于设计用户界面为主的应用程序。它是Qt Quick，诺基亚开发的用户界面创建包的一部分。QML 主要用于移动应用程序，注重于触控输入、流畅的动画（60张/秒）和用户体验。QML documents 描述元素的对象树。<br>
QML 元素可以透过标准 JavaScript 增强，包括这 inline 和引入.js 档。元素可以也无缝集成和使用 Qt 框架的 C++ 组件扩展。<br>
语言的名称是 QML。runtime的名称是 QQuickView。</p>
</blockquote>
<h3 id="1-效果展示">1、效果展示</h3>
<figure data-type="image" tabindex="1"><img src="https://Zhangfan94.github.io/post-images/1610645537078.gif" alt="" loading="lazy"></figure>
<h3 id="2-demo-文件结构">2、DEMO 文件结构</h3>
<figure data-type="image" tabindex="2"><img src="https://Zhangfan94.github.io/post-images/1610645155414.png" alt="" loading="lazy"></figure>
<h3 id="3-文件内容">3、文件内容</h3>
<p><strong>LiveTileBackground.qml</strong></p>
<pre><code class="language-qml">import QtQuick 2.0
import QtQuick.Controls 2.2

Rectangle {

    property alias bgHeight: bg.height
    property alias bgWidth: bg.width
    property alias bgColor: bg.color

    id: bg
    width: 145
    height: 145
    color: &quot;#222324&quot;
    radius: 15
    border.color: &quot;#bbbbbb&quot;
    border.width: 1.5
    clip: true

}
</code></pre>
<p><strong>LiveTileFlipable.qml</strong></p>
<pre><code class="language-qml">import QtQuick 2.0
import QtQuick.Controls 2.2
import QtQml 2.0

Flipable{

    id: flipable
    width: 145
    height: 145

    property alias flipFront: flipable.front
    property alias flipBack: flipable.back
    property alias overtimeTimer: timer
    property real opsOvertime: 4000
    property real rotationDuration: 1000
    property bool flipped: false
    property bool autoFlip: true

    Timer {
        id: timer
        interval: opsOvertime
        repeat: false
        onTriggered: {
            flipable.flipped = false
        }
    }

    MouseArea {
        id: mouseArea
        anchors.fill: parent
        propagateComposedEvents: true

        onDoubleClicked: { mouse.accepted = false;}
        onPositionChanged: { mouse.accepted = false;}
        onPressed:  {
            console.log(&quot;onClicked&quot;)
            if(autoFlip === true){
                flipable.flipped = true
                timer.start()
            }
            else{
                flipable.flipped = !flipable.flipped
            }

            mouse.accepted = false;
        }
        onPressAndHold: { mouse.accepted = false; }
        onClicked:  { mouse.accepted = false;}
        onReleased: { mouse.accepted = false;}
        onWheel: { wheel.accepted = false; }
    }

    transform: Rotation{
        id: rotation
        origin.x: flipable.width/2
        origin.y: flipable.height/2
        axis{x:0; y:1; z:0}
        angle: 0
    }

    states:State {
            name: &quot;back&quot;
            PropertyChanges {
                target: rotation
                angle: 180
            }
            when: flipable.flipped
        }

    transitions: Transition {
        NumberAnimation {
            target: rotation
            property: &quot;angle&quot;
            duration: rotationDuration
        }
    }
}
</code></pre>
<p><strong>LiveTileImageTextRow.qml</strong></p>
<pre><code class="language-qml">import QtQuick 2.0
import QtQuick.Controls 2.2
import QtQuick.Layouts 1.0

LiveTileBackground{
    id: backgroundLable
    width: 281
    height: 100

    property alias tileImageVisible: tileImage.visible
    property alias tileImageSource: tileImage.source
    property alias tileLableText: tileLable.text
    property alias tileLableVisible: tileLable.visible

    RowLayout {
        id:layout
        anchors.fill: parent
        anchors.rightMargin: 10
        anchors.leftMargin: 10
        spacing: 0

        Image {
            id: tileImage

            sourceSize.height: 60
            sourceSize.width: 60

            fillMode: Image.PreserveAspectFit

            anchors.verticalCenter: parent.verticalCenter
            Layout.preferredHeight: parent.height - 20
            Layout.preferredWidth: parent.height - 20

        }

        Item {
            id: spacer
            Layout.fillHeight: true// spacer item
            Layout.fillWidth: true
        }

        Text {
            id: tileLable
            color: &quot;#ffffff&quot;
            font.pixelSize: 40
            horizontalAlignment: Text.AlignRight
            verticalAlignment: Text.AlignVCenter
            fontSizeMode: Text.Fit
            minimumPixelSize: 12

            anchors.verticalCenter: parent.verticalCenter
            Layout.preferredHeight: parent.height - 20
            Layout.preferredWidth: parent.width - tileImage.width - 20

        }
    }

}
</code></pre>
<p><strong>main.qml</strong></p>
<pre><code class="language-qml">import QtQuick 2.9
import QtQuick.Window 2.2
import QtQuick.Controls 2.2

Window {
    width: 200
    height: 150
    visible: true

    LiveTileFlipable {
        id: volumeFlipable
        width: parent.width
        height: parent.height

        flipFront: LiveTileImageTextRow {
            id: volumeLable
            tileImageSource: &quot;qrc:/Volume.png&quot;
            tileLableText: &quot;10&quot;
            anchors.fill: parent
            anchors.margins: 10
        }

        flipBack: LiveTileBackground {
            anchors.fill: parent
            anchors.margins: 10

            Slider{
                id: volumeSlider
                width: parent.width
                height: parent.height/2
                value: 0.4
                anchors.margins: 5
                anchors.centerIn: parent
                onValueChanged: {
                    volumeFlipable.overtimeTimer.restart()
                }
            }
        }
    }
}
</code></pre>
<h3 id="4-知识点">4、知识点</h3>
<p>主要是利用了 QML 的 <a href="https://doc.qt.io/qt-5/qml-qtquick-flipable.html">Flipable</a>  类型，通过 front 和 back 两个属性来设置卡片的正反两面，再利用 <a href="https://doc.qt.io/qt-5/qml-qtquick-rotation.html">Rotation</a>, <a href="https://doc.qt.io/qt-5/qml-qtquick-state.html">State</a> 和 <a href="https://doc.qt.io/qt-5/qmlexampletoggleswitch.html#transition">Transition</a>类型实现了反转的动画效果。</p>
<p><strong>注意点</strong>：</p>
<ul>
<li>在 LiveTileFlipable.qml 文件中鼠标事件需要透传，否则卡片背面的的 slider 控件无法获取鼠标事件。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hi3535平台移植e2fsprogs]]></title>
        <id>https://Zhangfan94.github.io/post/hi3535-ping-tai-yi-zhi-e2fsprogs/</id>
        <link href="https://Zhangfan94.github.io/post/hi3535-ping-tai-yi-zhi-e2fsprogs/">
        </link>
        <updated>2020-10-27T16:19:27.000Z</updated>
        <summary type="html"><![CDATA[<p>摘要：NVR平台因为经常掉电硬重启，长时间使用中会偶尔出现，存储硬盘文件目录损坏，导致一些文件无法读取和删除，影响视频的循环存储。所以希望每次开机之前系统可以自动检测并修复硬盘损坏的文件以及目录。</p>
]]></summary>
        <content type="html"><![CDATA[<p>摘要：NVR平台因为经常掉电硬重启，长时间使用中会偶尔出现，存储硬盘文件目录损坏，导致一些文件无法读取和删除，影响视频的循环存储。所以希望每次开机之前系统可以自动检测并修复硬盘损坏的文件以及目录。</p>
<!-- more -->
<h3 id="一-工具">一、工具</h3>
<ol>
<li>海思平台的开发环境（SDK）</li>
<li>e2fsprogs-1.45.4源码（https://git.kernel.org/pub/scm/fs/ext2/e2fsprogs.git）</li>
</ol>
<h3 id="二-编译">二、编译</h3>
<ol>
<li>解压e2fsprogs-1.45.4源码</li>
<li>进入e2fsprogs-1.45.4文件夹根目录并执行以下命令：</li>
</ol>
<pre><code>./configure  --host=arm-linux --prefix=$PWD/_install --disable-nls  --disable-defrag CC=/opt/hisi-linux-nptl/arm-hisiv100-linux/target/bin/arm-hisiv100nptl-linux-gcc 

make -j4

make install
</code></pre>
<ol start="3">
<li>文件被安装在 _install 文件夹下，复制到我们的hi3535平台上，就可以使用了。<br>
<img src="http://image.talk20s.com/blog/20200121194419.png" alt="" loading="lazy"></li>
<li>为了每次开机可以自动的检查硬盘 在/etc/udev/rules.d/10-usbstorage.rules<br>
增加：</li>
</ol>
<pre><code># mount the specify dir
ACTION==&quot;add&quot;, SYSFS{removable}==&quot;0&quot;, RUN+=&quot;/sbin/fsck.ext4 -cy /dev/%k&quot;
ACTION==&quot;add&quot;, SYSFS{removable}==&quot;0&quot;, RUN+=&quot;/bin/mount /dev/%k /home/videos&quot;, GOTO=&quot;media_by_label_auto_mount_end&quot;
</code></pre>
<blockquote>
<p>https://wiki.archlinux.org/index.php/Udev_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)<br>
https://www.ibm.com/developerworks/cn/linux/l-cn-udev/index.html</p>
</blockquote>
<h3 id="三-问题">三、问题</h3>
<pre><code>1.问题
e4defrag.c:199: error: #error fallocate64 not available!
Makefile:460: recipe for target 'e4defrag.o' failed

解决
加 --disable-defrag 
http://lists.busybox.net/pipermail/buildroot/2015-July/134916.html
</code></pre>
<pre><code>2.问题
fatal error: libintl.h: No such file or directory

解决
加 --disable-nls 
说明
The --enable-nls option enables Native Language Support (NLS), which lets GCC output diagnostics in languages other than American English. Native Language Support is enabled by default if not doing a canadian cross build. The --disable-nls option disables NLS.

http://flash.uchicago.edu/~jbgallag/configure.html
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hi3536移植QT5.9.7]]></title>
        <id>https://Zhangfan94.github.io/post/hi3536-yi-zhi-qt597/</id>
        <link href="https://Zhangfan94.github.io/post/hi3536-yi-zhi-qt597/">
        </link>
        <updated>2020-10-27T16:16:55.000Z</updated>
        <summary type="html"><![CDATA[<p>摘要：QT在嵌入式平台上使用非常广泛，这次将QT5.9.7移植到Hisi3536平台，在此记录下移植过程，方便以后需要的时候回顾。</p>
]]></summary>
        <content type="html"><![CDATA[<p>摘要：QT在嵌入式平台上使用非常广泛，这次将QT5.9.7移植到Hisi3536平台，在此记录下移植过程，方便以后需要的时候回顾。</p>
<!-- more -->
<h4 id="搭建交叉编译环境">搭建交叉编译环境</h4>
<p>这一部分，海思的SDK已经写得很清楚了，只需要根据文档执行相对应的脚本就可以部署好环境。</p>
<h4 id="修改平台配置目录">修改平台配置目录</h4>
<pre><code class="language-makefile">cd qt-everywhere-opensource-src-5.9.7/qtbase/mkspecs
复制linux-arm-gnueabi-g++为linux-hi3536-g++
cp -ar linux-arm-gnueabi-g++ linux-hi3536-g++
修改 qmake.conf，配置如下

-------------------------------------------------------
#
# qmake configuration for building with arm-linux-g++
#

MAKEFILE_GENERATOR      = UNIX
CONFIG                 += incremental
QMAKE_INCREMENTAL_STYLE = sublib

include(../common/linux.conf)
include(../common/gcc-base-unix.conf)
include(../common/g++-unix.conf)

include(../devices/common/linux_device_pre.conf)

DEFINES += EGL_FBDEV

# gpu  注意路径为Hi3536的SDK目录
QMAKE_INCDIR_EGL += /home/oscar/workspace/Hi3536_SDK_V2.0.6.0/mpp_single/component/gpu/release/include
QMAKE_LIBDIR_EGL += /home/oscar/workspace/Hi3536_SDK_V2.0.6.0/mpp_single/component/gpu/release/lib
QMAKE_LIBS_EGL   += -lmali
QMAKE_INCDIR_OPENGL_ES2 += /home/oscar/workspace/Hi3536_SDK_V2.0.6.0/mpp_single/component/gpu/release/include
QMAKE_LIBDIR_OPENGL_ES2 += /home/oscar/workspace/Hi3536_SDK_V2.0.6.0/mpp_single/component/gpu/release/lib
QMAKE_LIBS_OPENGL_ES2 += -lmali

# modifications to g++.conf
QMAKE_CC                = /opt/hisi-linux/x86-arm/arm-hisiv400-linux/target/bin/arm-hisiv400-linux-gcc -march=armv7-a -mfloat-abi=softfp -mfpu=neon-vfpv4 -mno-unaligned-access -fno-aggressive-loop-optimizations
QMAKE_CXX               = /opt/hisi-linux/x86-arm/arm-hisiv400-linux/target/bin/arm-hisiv400-linux-g++ -march=armv7-a -mfloat-abi=softfp -mfpu=neon-vfpv4 -mno-unaligned-access -fno-aggressive-loop-optimizations
QMAKE_LINK              = /opt/hisi-linux/x86-arm/arm-hisiv400-linux/target/bin/arm-hisiv400-linux-g++
QMAKE_LINK_SHLIB        = /opt/hisi-linux/x86-arm/arm-hisiv400-linux/target/bin/arm-hisiv400-linux-g++

# modifications to linux.conf
QMAKE_AR                = /opt/hisi-linux/x86-arm/arm-hisiv400-linux/target/bin/arm-hisiv400-linux-ar cqs
QMAKE_OBJCOPY           = /opt/hisi-linux/x86-arm/arm-hisiv400-linux/target/bin/arm-hisiv400-linux-objcopy
QMAKE_NM                = /opt/hisi-linux/x86-arm/arm-hisiv400-linux/target/bin/arm-hisiv400-linux-nm -P
QMAKE_STRIP             = /opt/hisi-linux/x86-arm/arm-hisiv400-linux/target/bin/arm-hisiv400-linux-strip

EGLFS_DEVICE_INTEGRATION = eglfs_mali

include(../devices/common/linux_arm_device_post.conf)

load(qt_config) 
</code></pre>
<h4 id="配置qt">配置QT</h4>
<p>说明：<br>
-prefix: 安装目录<br>
-xplatform: 平台选择<br>
-eglfs: 启用eglfs, OpenGL依赖<br>
-opengl es2: 启用openGL ES 2.0<br>
-tslib: 启用tslib</p>
<pre><code class="language-shell">./configure -prefix /opt/qt597_Hi3536 -opensource -confirm-license -release \
-strip -linuxfb -qt-zlib -no-gif -qt-libpng -qt-libjpeg -qt-freetype \
-no-rpath -no-pch -no-avx -no-openssl -no-cups -no-dbus -no-pkg-config \
-xplatform linux-arm-hisiv400-g++ -make libs -eglfs -opengl es2 -no-glib \
-nomake examples -nomake tools -tslib -qt-sqlite \
-I/usr/local/arm3536/tslib-1.4/include \
-L/usr/local/arm3536/tslib-1.4/lib

增加-no-iconv否则运行出错：
QIconvCodec::convertToUnicode: using Latin-1 for conversion, iconv_open failed
QIconvCodec::convertFromUnicode: using Latin-1 for conversion, iconv_open failed
修改如下：

./configure -prefix /opt/qt597_Hi3536 -opensource -confirm-license -release \
-strip -linuxfb -qt-zlib -no-gif -qt-libpng -qt-libjpeg -qt-freetype \
-no-iconv -no-rpath -no-pch -no-avx -no-openssl -no-cups -no-dbus -no-pkg-config \
-xplatform linux-arm-hi3536-g++ -make libs -eglfs -opengl es2 -no-glib \
-nomake examples -nomake tools -tslib -qt-sqlite \
-I/usr/local/arm3536/tslib-1.4/include \
-L/usr/local/arm3536/tslib-1.4/lib
</code></pre>
<h4 id="编译">编译</h4>
<pre><code class="language-shell">make -j4      # -j4: 启用4线程同时编译，提升编译速度
make install
</code></pre>
<h4 id="移植">移植</h4>
<p>在目标板上/lib目录下创建Qt文件夹<br>
将安装文件夹下的lib、plugins、和qml拷贝到目标板的/lib/Qt文件夹下<br>
配置/etc/profile</p>
<pre><code class="language-shell">#Qt配置
# 将/lib/Qt/lib添加到目标板的LD_LIBRARY_PATH环境变量中
LD_LIBRARY_PATH=&quot;/usr/local/lib:/usr/lib:/lib/Qt/lib:/lib/Qt597/lib:/home/app/lib&quot;

#Qt配置
export QT_ROOT=/lib/Qt
export QT_QPA_FONTDIR=$QT_ROOT/lib/fonts
export QT_QPA_PLATFORM=eglfs    // 指定QPA平台
export QT_QPA_EGLFS_FB=/dev/fb0   //指定QPA的framebuffer
export QT_QPA_PLATFORM_PLUGIN_PATH=$QT_ROOT/plugins
export QT_QPA_EGLFS_WIDTH=1280
export QT_QPA_EGLFS_HEIGHT=720      # 测试验证貌似长宽需为16:9；设置为800时，eglfs创建surface失败0x300b
export QT_QPA_EGLFS_PHYSICAL_WIDTH=216
export QT_QPA_EGLFS_PHYSICAL_HEIGHT=135
export QT_QPA_EGLFS_DEPTH=16
export QT_QPA_EGLFS_INTEGRATION=eglfs_mali
export QT_QPA_EGLFS_ALWAYS_SET_MODE=1
export QT_QPA_GENERIC_PLUGINS=tslib
export QML_IMPORT_PATH=$QT_ROOT/qml
export QML2_IMPORT_PATH=$QT_ROOT/qml
#调试信息开关
#export QT_QPA_EGLFS_DEBUG=1
#export QT_LOGGING_RULES=qt.qpa.*=true

export LD_LIBRARY_PATH
</code></pre>
<p>改完记得执行source /etc/profile来生效</p>
<h4 id="配置hisi平台">配置Hisi平台</h4>
<blockquote>
<ol>
<li>按照《HIFB开发指南.pdf》 说明加载hifb.ko驱动，这里需要说明的是，如果QT程序运行在fb0上，分辨率为1920<em>1080，颜色格式为ARGB8888，1buffer模式下，则需要vram0_size = 1920</em>1080<em>4=8100K<br>
如果为2 buffer模式下则需要vram0_size=1920</em>1080<em>4</em>2=16200K<br>
说明：为什么要使用ARGB8888而不用ARGB1555，是因为我们QT编译使用的是32位framebuffer。不然的话会做不了透明处理。</li>
<li>使能fb0，前提是VO设备已初始化完毕</li>
</ol>
</blockquote>
<h4 id="遇见的错误">遇见的错误：</h4>
<blockquote>
<p>1、bash: /opt/hisi-linux/x86-arm/arm-hisiv300-linux/target/bin/arm-hisiv300-linux-gcc: 没有那个文件或目录。<br>
解决：<br>
这是因为宿主机是64 位 而交叉编译器是针对32位的开发板制作的。所以要安装对应的32位库。<br>
我的linux宿主机是ubuntu 16.04 64位。<br>
安装命令：<br>
sudo apt install lib32z1-dev</p>
<p>2、demo程序运行时出现错误提示</p>
<pre><code class="language-shell">QIconvCodec::convertToUnicode: using Latin-1 for conversion,iconv_open failed
QIconvCodec::convertFromUnicode: using Latin-1 for conversion,iconv_open failed
</code></pre>
<p>解决：<br>
./configure 后添加编译 -no-iconv</p>
</blockquote>
<p>3、报错module &quot;***&quot; is not installed</p>
<blockquote>
<pre><code class="language-shell">QQmlApplicationEngine failed to load component
qrc:/main.qml:1 module &quot;QtQuick&quot; is not installed
qrc:/main.qml:2 module &quot;QtQuick.Window&quot; is not installed
qrc:/main.qml:1 module &quot;QtQuick&quot; is not installed
qrc:/main.qml:2 module &quot;QtQuick.Window&quot; is not installed
</code></pre>
<p>在/etc/profile文件中加入</p>
<pre><code class="language-shell">export QML_IMPORT_PATH=$QT_ROOT/qml
export QML2_IMPORT_PATH=$QT_ROOT/qml
</code></pre>
</blockquote>
<p>4、字库找不到</p>
<blockquote>
<p>报错如下：</p>
<pre><code class="language-shell">Note that Qt no longer ships fonts. Deploy some (from http://dejavu-fonts.org for example) or switch to fontconfig.
QFontDatabase: Cannot find font directory /lib/Qt/lib/fonts.

</code></pre>
<p>解决：说的比较清楚了，就是没找到/lib/Qt/lib/fonts，把fonts放到下面就好。</p>
</blockquote>
<p>5、没有加在GPU相关KO</p>
<blockquote>
<p>报错：</p>
<pre><code class="language-shell">ERROR: The DDK is not compatible with any of the Mali GPUs on the system.
The DDK was built for 0x720 r1p1 status range [0..15], but none of the GPUs matched:
Could not initialize egl display
Aborted
</code></pre>
<p>解决：《GPU 开发用户指南.pdf》加载相关驱动</p>
<pre><code class="language-shell">/home/app/komod/ko # ls
hi_dbe.ko      kds.ko         loadgpu        mali_kbase.ko
/home/app/komod/ko # ./loadgpu  -i
</code></pre>
</blockquote>
<p>6、/dev/fb0 打开失败问题</p>
<blockquote>
<p>报错：</p>
<pre><code>EGLFS: Failed to open /dev/fb0
EGLFS: Can't continue without a display
</code></pre>
<p>解决：<br>
由于海思在操作Framebuffer需要进行相应的配置，如果没有进行相应的配置，那么去打开/dev/fb0是会报错的。<br>
具体进行了如下两个操作步骤：<br>
(1)、初始化MPP<br>
(2)、使能输出设备VO<br>
经过了以上两个步骤以后，打开/dev/fb0才不会出错</p>
</blockquote>
<p>7、QT_QPA_EGLFS_PHYSICAL_WIDTH and QT_QPA_EGLFS_PHYSICAL_HEIGHT</p>
<blockquote>
<p>报错：</p>
<pre><code class="language-shell">Unable to query physical screen size, defaulting to 100 dpi.
To override, set QT_QPA_EGLFS_PHYSICAL_WIDTH and QT_QPA_EGLFS_PHYSICAL_HEIGHT (in millimeters).
libpng warning: iCCP: known incorrect sRGB profile
libpng warning: iCCP: known incorrect sRGB profile
qml: background.x:0background.y:0
qml: background.width:1280background.height:800
</code></pre>
<p>解决：<br>
设置profile文件中的QT_QPA_EGLFS_PHYSICAL_WIDTH and QT_QPA_EGLFS_PHYSICAL_HEIGHT，液晶面板显示区域长宽（mm），液晶说明书查。</p>
</blockquote>
<p>8、嵌入式linux下使用qt virtualkeyboard崩溃<br>
报错：</p>
<pre><code class="language-shell">qml: background.width:1280background.height:800
EGLFS: OpenGL windows cannot be mixed with others.
Aborted
</code></pre>
<p>解决：</p>
<h4 id="其它问题">其它问题：</h4>
<p>1、 虚拟机无法上网了<br>
linux手动配置网卡：</p>
<pre><code class="language-shell">auto eth0
#iface eth0 inet dhcp
iface eth0 inet static
address 192.168.1.87
netmask 255.255.255.0
gateway 192.168.1.1
dns-nameservers 223.5.5.5
auto eth0 #开机自动连接
iface eth0 inet static #static表示使用固定ip，dhcp表示使用动态ip
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用STM32CubeMX工具配置工程步骤]]></title>
        <id>https://Zhangfan94.github.io/post/shi-yong-stm32cubemx-gong-ju-pei-zhi-gong-cheng-bu-zou/</id>
        <link href="https://Zhangfan94.github.io/post/shi-yong-stm32cubemx-gong-ju-pei-zhi-gong-cheng-bu-zou/">
        </link>
        <updated>2020-10-26T15:45:35.000Z</updated>
        <summary type="html"><![CDATA[<p>摘要：STM32CubeMX 是 ST 意法半导体近几年来大力推荐的 STM32 芯片图形化配置工具， 允许用户使用图形化向导生成 C 初始化代码，可以大大减轻开发工作，时间和费用。</p>
]]></summary>
        <content type="html"><![CDATA[<p>摘要：STM32CubeMX 是 ST 意法半导体近几年来大力推荐的 STM32 芯片图形化配置工具， 允许用户使用图形化向导生成 C 初始化代码，可以大大减轻开发工作，时间和费用。</p>
<!-- more -->
<p><strong>STM32CubeMX有以下几个特点：</strong></p>
<ol>
<li>直观的选择 MCU型号，可指定系列、封装、外设数量等条件</li>
<li>微控制器图形化配置</li>
<li>自动处理引脚冲突</li>
<li>动态设置时钟树，生成系统时钟配置代码</li>
<li>可以动态设置外围和中间件模式和初始化</li>
<li>功耗预测</li>
<li>C 代码工程生成器覆盖了 STM32 微控制器初始化编译软件，如 IAR， KEIL， GCC。</li>
<li>可以独立使用或者作为 Eclipse 插件使用</li>
</ol>
<h2 id="一-使用-stm32cubemx-工具配置工程模板">一、使用 STM32CubeMX 工具配置工程模板</h2>
<p>配置工程的一般步骤为：</p>
<ol>
<li>
<p>工程初步建立和保存</p>
</li>
<li>
<p>RCC 设置</p>
</li>
<li>
<p>时钟系统（时钟树） 配置</p>
</li>
<li>
<p>SYS中配置调试模式（常用SWD）</p>
</li>
<li>
<p>GPIO 功能引脚配置</p>
</li>
<li>
<p>配置Timer</p>
</li>
<li>
<p>生成工程源码</p>
</li>
<li>
<p>编写用户代码</p>
</li>
</ol>
<h2 id="二-详细配置流程以stm32f103c8tx为例">二、详细配置流程（以STM32F103C8Tx为例）</h2>
<p><strong>接下来我们将按照上面 的步骤，依次教大家使用 STM32CubeMX 工具生成一个完整的工程。</strong></p>
<p><em><strong>注意：使用STM32CubeMX的时候尽量把自己的代码与自动生成的代码放到不同的文件中，避免在导出的时候不小心覆盖掉，而且这样方便后边自己的改动与移植，相当于业务层直接被剥离出来了，换芯片的时候，你只需要用CubeMX配一下新的工程，然后把自己的业务层复制进去，然后编译，修改报错，测试。</strong></em></p>
<h4 id="1-工程初步建立和保存">1、工程初步建立和保存</h4>
<ol>
<li>工程名必须要配置。</li>
<li>堆栈配置，一般情况下单片机吧堆区设置为0，栈区根据情况设置，设置的如果太小，会出现奇怪的问题，比如函数调用的异常。</li>
<li>记得保存一下。</li>
</ol>
<figure data-type="image" tabindex="1"><img src="http://image.talk20s.com/blog/project.png" alt="project" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="http://image.talk20s.com/blog/codegenerator.png" alt="1571643224267" loading="lazy"></figure>
<h4 id="2-rcc-设置">2、RCC 设置</h4>
<p><img src="http://image.talk20s.com/blog/RCCsetting.png" alt="" loading="lazy"><br>
<strong>参数含义</strong></p>
<ol>
<li>选项 High Speed Clock（ HSE）用来配置HSE;<br>
1.1 BYPASS Clock Source 旁路时钟源，直接通过外部提供一个可靠<br>
的 4-26MHz 时钟作为 HSE。<br>
1.2 也就是不使用使用晶振/陶瓷振荡器，</li>
<li>选项 Low Speed Clock（ LSE）用来配置 LSE;</li>
<li>选项 Master Clock Output 1 用来选择是否使能 MCO1 引脚时钟输出;</li>
<li>选项 Master Clock Output 2 用来选择是否使能 MCO2 引脚时钟输出;</li>
<li>选项 Audio Clock Input（ I2S_CKIN）用来选择是否从 I2S_CKIN(PC9)输入I2S时钟;</li>
</ol>
<h4 id="3-时钟配置">3、时钟配置</h4>
<ol>
<li>时钟源参数设置： HSE 或者 HSI 配置。这里我们选择 HSE 为时钟源，所以我们之前必</li>
<li>须在 RCC 配置中我们开启 HSE。</li>
<li>时钟源选择： HSE 还是 HSI。这里我们配置选择器选择 HSE 即可。</li>
<li>PLL 分频系数 M 配置。</li>
<li>主 PLL 倍频系数 N 配置。</li>
<li>主 PLL 分频系数 P 配置。</li>
<li>系统时钟时钟源选择： PLL,HSI 还是 HSE。 这里毫无疑问，我们选择 PLL，选择器选择PLLCLK 即可。<br>
<img src="http://image.talk20s.com/blog/systimeconfig.png" alt="" loading="lazy"></li>
</ol>
<h4 id="4-sys配置">4、SYS配置</h4>
<ol>
<li>
<p>配置debug模式：选择Trace Asynchronous Sw(SWD模式)</p>
</li>
<li>
<p>如果要使用FreeRtos，HAL库的Timebase Source 不能使用SysTick，因为FreeRtos需要还是用。</p>
<figure data-type="image" tabindex="3"><img src="http://image.talk20s.com/blog/SYSconfig.png" alt="" loading="lazy"></figure>
</li>
</ol>
<h4 id="5-配置gpio">5、配置GPIO</h4>
<figure data-type="image" tabindex="4"><img src="http://image.talk20s.com/blog/GPIOconfig.png" alt="" loading="lazy"></figure>
<h4 id="6-配置timer">6、配置Timer</h4>
<blockquote>
<p>T=（TIM_Period+1）*（TIM_Prescaler+1）/TIMxCLK<br>
其中，TIMxCLK是其时钟频率，若是晶振为8MHz的，一般为72MHz</p>
</blockquote>
<ol>
<li>配置NVIC Interrupt Table</li>
<li>配置NVIC Setting 打开 global interrupt</li>
</ol>
<figure data-type="image" tabindex="5"><img src="http://image.talk20s.com/blog/TimerConfig.png" alt="" loading="lazy"></figure>
<p>T=（TIM_Period+1）*（TIM_Prescaler+1）/TIMxCLK</p>
<p>= (100 * 7200 )/7200000  = 0.1s  = 100 ms</p>
<figure data-type="image" tabindex="6"><img src="http://image.talk20s.com/blog/TimerConfig2.png" alt="" loading="lazy"></figure>
<h4 id="7-生成工程源码">7、生成工程源码</h4>
<figure data-type="image" tabindex="7"><img src="http://image.talk20s.com/blog/GenerateCode.png" alt="" loading="lazy"></figure>
<h4 id="8-iar打开工程">8、IAR打开工程</h4>
<p>打开工程后做出如下修改：</p>
<ol>
<li>因为CubeMX生成的工程默认使用的是STLINK，而且我们开发使用的是J-Liink，所以需要去IAR中配置下。</li>
</ol>
<figure data-type="image" tabindex="8"><img src="http://image.talk20s.com/blog/JLinkConfig.png" alt="" loading="lazy"></figure>
<ol start="2">
<li>为了调试方便，我们要把编译优化关掉，不然断点不好打，有些地方没法单步调试。</li>
</ol>
<figure data-type="image" tabindex="9"><img src="http://image.talk20s.com/blog/Optimizations.png" alt="" loading="lazy"></figure>
<h4 id="9-编译下载并调试">9、编译下载并调试</h4>
]]></content>
    </entry>
</feed>